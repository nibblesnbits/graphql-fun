schema {
  query: RootQueryType
  mutation: mutation
}

type RootQueryType {
  user(id: Int!): AppUser
  users(page: Int = 0, pageSize: Int = 10): [AppUser]
  group(id: Int!): Group
  groups(page: Int = 0, pageSize: Int = 10): [Group]
  activity(id: Int!): Activity
  activities(page: Int = 0, pageSize: Int = 10): [Activity]
  advertiser(id: Int!): Advertiser
  advertisers(page: Int = 0, pageSize: Int = 10): [Advertiser]
  location(id: Int!): Location
  locations(page: Int = 0, pageSize: Int = 10): [Location]
  event(id: Int!): Event
  events(page: Int = 0, pageSize: Int = 10): [Event]
  plan(id: Int!): Plan
  planSet(id: String!): [Plan]
  plans(page: Int = 0, pageSize: Int = 10): [Plan]
  category(id: Int!): Category
  categories(page: Int = 0, pageSize: Int = 10): [Category]
}

type AppUser {
  appUserId: Int!
  firstName: String!
  lastName: String!
  picUrl: String!
  birthday: String!
  gender: Int!
  phone: String!
  email: String!
  frequency: Int!
  budgetPerMonth: String!
  budgetPerActivity: String!
  country: String!
  timezone: String!
  isBanned: Boolean!
  setupMode: Boolean!
  schedules(from: DateTime, to: DateTime): [UserSchedule]
  groups(
    first: Int
    after: String
    last: Int
    before: String
    orderBy: String = "groupId"
    orderDirection: OrderDirection = Asc
  ): GroupConnection
  activities: [Activity]
  categories(status: Boolean = true): [Category]
  recurringSchedules: [UserRecurringSchedule]
  plans(from: DateTime, to: DateTime): [Plan]
}

type UserSchedule {
  userScheduleId: Int!
  appUserId: Int!
  startUtc: DateTime!
  endUtc: DateTime!
  timeName: String!
  isAvailable: String!
  recurringScheduleId: Int!
  startLocal: DateTime!
  endLocal: DateTime!
}

scalar DateTime

type GroupConnection {
  totalCount: Int!
  edges: [GroupConnectionEdge!]
  pageInfo: PageInfo!
}

type GroupConnectionEdge {
  node: Group!
  cursor: String!
}

type Group {
  groupId: Int!
  name: String!
  members(
    first: Int
    after: String
    last: Int
    before: String
    orderBy: String = "appUserId"
    orderDirection: OrderDirection = Asc
  ): GroupAppUserConnection
}

type GroupAppUserConnection {
  totalCount: Int!
  edges: [GroupAppUserConnectionEdge!]
  pageInfo: PageInfo!
}

type GroupAppUserConnectionEdge {
  node: GroupAppUser!
  cursor: String!
}

type GroupAppUser {
  appUserId: Int!
  firstName: String!
  lastName: String!
  picUrl: String!
  birthday: String!
  gender: Int!
  phone: String!
  email: String!
  frequency: Int!
  budgetPerMonth: String!
  budgetPerActivity: String!
  country: String!
  timezone: String!
  isBanned: Boolean!
  setupMode: Boolean!
}

type PageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

enum OrderDirection {
  Asc
  Desc
}

type Activity {
  activityId: Int!
  name: String!
  durationInMinutes: Int
  events: [Event]
  users: [AppUser]
}

type Event {
  eventId: Int!
  datetimeUtc: DateTime!
  location: Location!
  advertiser: Advertiser!
  activity: Activity!
  attendance: [Attendance]
}

type Location {
  locationId: Int!
  name: String!
  address: String!
  events: [Event]
}

type Advertiser {
  advertiserId: Int!
  name: String!
  email: String!
  events: [Event]
}

type Attendance {
  attendanceId: Int!
  appUserId: Int!
  eventId: Int!
  attended: Boolean!
  rating: Int!
  attendee: AppUser!
}

type Category {
  categoryId: Int!
  parentId: Int!
  name: String!
  users: [AppUser]
}

type UserRecurringSchedule {
  userRecurringScheduleId: Int!
  appUserId: Int!
  weekDay: Int!
  imageUrl: String!
  hourStart: Int!
  durationInHours: Int!
  weekDayDisplay: String!
  startTimeDisplay: String!
  endTimeDisplay: String!
}

type Plan {
  planId: Int!
  eventId: Int!
  appUserId: Int!
  groupId: Int!
  planSetId: String!
  videoChatUrl: String
  attendees: [AppUser]
  event: Event!
  group: Group!
}

type mutation {
  updateUserData(
    appUserId: Int!
    firstName: String!
    lastName: String!
    picUrl: String!
    birthday: String!
    gender: Int!
    phone: String!
    email: String!
    frequency: Int!
    budget: String!
    country: String!
    timezone: String!
  ): AppUser
  updateUserRecurringSchedules(
    appUserId: Int!
    schedules: [UserRecurringScheduleInput!]!
  ): [UserRecurringSchedule!]!
  updateUserSchedules(
    appUserId: Int!
    schedules: [UserScheduleInput!]!
  ): [UserSchedule!]!
}

input UserRecurringScheduleInput {
  weekDay: Int!
  imageUrl: String!
  hourStart: Int!
  hourEnd: Int!
}

input UserScheduleInput {
  startLocal: DateTime!
  endLocal: DateTime!
  timeName: String!
  isAvailable: Boolean!
}
