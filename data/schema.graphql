schema {
  query: RootQueryType
  mutation: mutation
}

type RootQueryType {
  group(id: Int!): Group
  user(id: Int!): AppUser
  users: [AppUser]
  groups: [Group]
  event(id: Int!): Event
  activity(id: Int!): Activity
  advertiser(id: Int!): Advertiser
  location(id: Int!): Location
  activities: [Activity]
  events: [Event]
  advertisers: [Advertiser]
  locations: [Location]
  plan(id: Int!): Plan
  plans: [Plan]
}

type Group {
  groupId: Int!
  name: String!
  members: [AppUser]
}

type AppUser {
  appUserId: Int!
  firstName: String!
  lastName: String!
  picUrl: String!
  birthday: String!
  gender: Int!
  phone: String!
  email: String!
  frequency: Int!
  budget: String!
  country: String!
  timezone: String!
  isBanned: Boolean!
  setupMode: Boolean!
  schedules: [UserSchedule]
  groups: [Group]
}

type UserSchedule {
  userScheduleId: Int!
  name: String!
  startUtc: UtcMoment!
  endUtc: UtcMoment!
  startLocal: Moment!
  endLocal: Moment!
}

scalar UtcMoment

scalar Moment

type Event {
  eventId: Int!
  datetimeUtc: UtcMoment!
  activity: Activity
  advertiser: Advertiser
  location: Location
}

type Activity {
  activityId: Int!
  name: String!
  durationInMinutes: Int
  events: [Event]
}

type Advertiser {
  advertiserId: Int!
  name: String!
  email: String!
  events: [Event]
}

type Location {
  locationId: Int!
  name: String!
  address: String!
  events: [Event]
}

type Plan {
  planSetId: String!
  attendees: [AppUser]
}

type mutation {
  addUser(firstName: String!, email: String!): AppUser
  updateUserSchedule(appUserId: Int!, schedules: [ScheduleInput!]!): AppUser
  addGroup(name: String!, members: [String!]!): Group
  addGroupMembers(id: Int!, members: [String!]!): Group
  addActivity(name: String!, durationInMinutes: Int): Activity
  addEvent(datetimeUtc: UtcMoment!): Event
}

input ScheduleInput {
  name: String!
  startUtc: UtcMoment!
  endUtc: UtcMoment!
}
