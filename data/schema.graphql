schema {
  query: RootQueryType
  mutation: mutation
}

type RootQueryType {
  user(id: Int!): AppUser
  users(page: Int, pageSize: Int = 10): [AppUser]
  group(id: Int!): Group
  groups(page: Int, pageSize: Int = 10): [Group]
  activity(id: Int!): Activity
  activities(page: Int, pageSize: Int = 10): [Activity]
  advertiser(id: Int!): Advertiser
  advertisers(page: Int, pageSize: Int = 10): [Advertiser]
  location(id: Int!): Location
  locations(page: Int, pageSize: Int = 10): [Location]
  event(id: Int!): Event
  events(page: Int, pageSize: Int = 10): [Event]
  plan(id: Int!): Plan
  plans(page: Int, pageSize: Int = 10): [Plan]
  category(id: Int!): Category
  categories(page: Int, pageSize: Int = 10): [Category]
}

type AppUser {
  appUserId: Int!
  firstName: String!
  lastName: String!
  picUrl: String!
  birthday: String!
  gender: Int!
  phone: String!
  email: String!
  frequency: Int!
  budget: String!
  country: String!
  timezone: String!
  isBanned: Boolean!
  setupMode: Boolean!
  schedules: [UserSchedule]
  groups: [Group]
  activities: [Activity]
  categories: [Activity]
  recurringSchedules: [UserRecurringSchedule]
}

type UserSchedule {
  userScheduleId: Int!
  appUserId: Int!
  startUtc: UtcMoment!
  endUtc: UtcMoment!
  startLocal: Moment!
  endLocal: Moment!
  timeName: String!
  isAvailable: String!
  recurringScheduleId: Int!
}

scalar UtcMoment

scalar Moment

type Group {
  groupId: Int!
  name: String!
  members: [AppUser!]!
}

type Activity {
  activityId: Int!
  name: String!
  durationInMinutes: Int
  events: [Event]
  users: [AppUser]
}

type Event {
  eventId: Int!
  datetimeUtc: UtcMoment!
}

type UserRecurringSchedule {
  userRecurringScheduleId: Int!
  appUserId: Int!
  weekDay: Int!
  imageUrl: String!
  hourStart: Int!
  durationInHours: Int!
  weekDayDisplay: String!
  startTimeDisplay: String!
  endTimeDisplay: String!
}

type Advertiser {
  advertiserId: Int!
  name: String!
  email: String!
  events: [Event]
}

type Location {
  locationId: Int!
  name: String!
  address: String!
  events: [Event]
}

type Plan {
  planSetId: String!
  attendees: [AppUser]
}

type Category {
  categoryId: Int!
  parentId: Int!
  name: String!
  users: [AppUser]
}

type mutation {
  updateUserRecurringSchedules(
    appUserId: Int!
    schedules: [UserRecurringScheduleInput!]!
  ): [UserRecurringSchedule!]!
  updateUserSchedules(
    appUserId: Int!
    schedules: [UserScheduleInput!]!
  ): [UserSchedule!]!
}

input UserRecurringScheduleInput {
  weekDay: Int!
  imageUrl: String!
  hourStart: Int!
  durationInHours: Int!
}

input UserScheduleInput {
  startLocal: Moment!
  endLocal: Moment!
  timeName: String!
  isAvailable: Boolean!
}
